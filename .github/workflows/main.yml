name: Validate IFC

on:
  workflow_dispatch:  # Permite execução manual

jobs:
  validate-ifc:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Upgrade pip
      run: python3 -m pip install --upgrade pip

    - name: Install IfcOpenShell
      run: pip install ifcopenshell

    - name: Validate all IFC files and generate report
      run: |
        python3 <<EOF
        import os
        import ifcopenshell

        # Diretório onde estão os arquivos
        repo_dir = os.getenv('GITHUB_WORKSPACE')

        # Listar todos os arquivos .ifc no repositório
        ifc_files = [
            os.path.join(repo_dir, f)
            for f in os.listdir(repo_dir)
            if f.endswith('.ifc')
        ]

        if not ifc_files:
            print("Nenhum arquivo IFC encontrado no repositório.")
            exit(1)

        # Caminho do arquivo IDS
        ids_path = os.path.join(repo_dir, "path/to/your/ids/file.ids")

        # Relatório de validação
        report_path = os.path.join(repo_dir, "validation_report.txt")
        with open(report_path, "w") as report:
            report.write("Relatório de Validação IFC\n")
            report.write("=" * 50 + "\n\n")

            # Validação de cada arquivo IFC
            for ifc_file in ifc_files:
                report.write(f"Arquivo: {ifc_file}\n")
                try:
                    model = ifcopenshell.open(ifc_file)

                    # Validar IfcProject
                    project = model.by_type('IfcProject')
                    if project:
                        report.write("  - IfcProject: Presente\n")
                    else:
                        report.write("  - IfcProject: Ausente\n")

                    # Validar IfcBuilding
                    building = model.by_type('IfcBuilding')
                    if building:
                        report.write("  - IfcBuilding: Presente\n")
                    else:
                        report.write("  - IfcBuilding: Ausente\n")

                    # Validar IfcBuildingStorey
                    storey = model.by_type('IfcBuildingStorey')
                    if storey:
                        report.write("  - IfcBuildingStorey: Presente\n")
                    else:
                        report.write("  - IfcBuildingStorey: Ausente\n")

                    # Validar IfcSpace
                    spaces = model.by_type('IfcSpace')
                    if len(spaces) >= 2:
                        report.write(f"  - IfcSpace: {len(spaces)} espaços encontrados\n")
                    else:
                        report.write("  - IfcSpace: Menos de 2 espaços encontrados\n")

                    # Validar Coordenadas (exemplo simplificado)
                    site = model.by_type('IfcSite')
                    if site:
                        placement = site[0].ObjectPlacement
                        if placement:
                            coordinates = placement.RelativePlacement.Location.Coordinates
                            if coordinates:
                                report.write(f"  - Coordenadas: {coordinates}\n")
                            else:
                                report.write("  - Coordenadas: Não encontradas\n")
                        else:
                            report.write("  - Coordenadas: Não encontradas\n")
                    else:
                        report.write("  - IfcSite: Ausente\n")

                    report.write("\n")
                except Exception as e:
                    report.write(f"Erro na validação: {e}\n\n")

        print(f"Relatório gerado: {report_path}")
        EOF

    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: validation_report.txt
